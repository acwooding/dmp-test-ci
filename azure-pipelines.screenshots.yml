trigger: none # Manual only

parameters:
- name: matrix
  displayName: Pool Image and Python Version Matrix
  type: object
  default:
    # mac_py310:
    #   imageName: 'macOS-latest'
    #   python.version: '3.10'
    linux_py310:
      imageName: 'ubuntu-latest'
      python.version: '3.10'
    windows_py310:
      imageName: 'windows-latest'
      python.version: '3.10'
    # mac_py311:
    #   imageName: 'macOS-latest'
    #   python.version: '3.11'
    linux_py311:
      imageName: 'ubuntu-latest'
      python.version: '3.11'
    windows_py311:
      imageName: 'windows-latest'
      python.version: '3.11'
    # mac_py312:
    #   imageName: 'macOS-latest'
    #   python.version: '3.12'
    linux_py312:
      imageName: 'ubuntu-latest'
      python.version: '3.12'
    windows_py312:
      imageName: 'windows-latest'
      python.version: '3.12'

variables:
  triggeredByPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]

stages:
  - stage: GenerateScreenshots
    displayName: Generate Test Screenshots
    jobs:
      - job: UpdateScreenshots
        strategy:
          matrix: ${{ parameters.matrix }}

        pool:
          vmImage: $(imageName)

        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'

        - script: |
            python -m http.server 8000 -d $(Build.SourcesDirectory)/datamapplot/tests/html &
          displayName: 'Start HTTP server (Unix)'
          condition: ne(variables['Agent.OS'], 'Windows_NT')

        - script: |
            start /b cmd /c "python -m http.server 8000 -d %BUILD_SOURCESDIRECTORY%\datamapplot\tests\html"
            timeout /t 2
            curl -I http://localhost:8000
          displayName: 'Start HTTP server (Windows)'
          condition: eq(variables['Agent.OS'], 'Windows_NT')

        - task: NodeTool@0
          inputs:
            versionSpec: '22'
          displayName: 'Use Node.js for frontend tests'

        - script: |
            npm ci
          displayName: 'Install npm dependencies'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'

        - script: |
            npx playwright install --with-deps
          displayName: 'Install Playwright browsers'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'

        - script: |
            npx playwright test --update-snapshots
          displayName: 'Run Playwright tests'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'
          env:
            CI: 'true'

        - script: |
            npx playwright test --update-snapshots
            git config --global user.email "azure-pipelines@example.com"
            git config --global user.name "Azure Pipelines"
            git checkout -b update-screenshots-$(Build.BuildId)
            git add -A
            git commit -m "Update screenshot references"
            git push origin update-screenshots-$(Build.BuildId)
          displayName: 'Generate and commit screenshots'
          env:
            GIT_TOKEN: $(System.AccessToken)

        - task: CreatePullRequest@1
          inputs:
            githubConnection: 'github'
            repoOwner: '$(Build.Repository.Name)'
            title: 'Update Platform Screenshots'
            body: |
              Generated new screenshot references from CI environment.

              Platform: $(Agent.OS)
              Playwright version: $(npx playwright --version)
            sourceBranch: 'update-screenshots-$(Build.BuildId)'
            targetBranch: '$(Build.SourceBranch)'
            title: 'Update Platform Screenshots for $(Build.BuildId)'
          displayName: 'Create Pull Request'

        - task: PublishTestResults@2
          displayName: 'Publish frontest test results'
          inputs:
            searchFolder: 'test-results'
            testResultsFormat: 'JUnit'
            testResultsFiles: 'e2e-junit-results.xml'
            mergeTestResults: true
            failTaskOnFailedTests: true
            testRunTitle: 'Playwright Test Results'
          condition: succeededOrFailed()
