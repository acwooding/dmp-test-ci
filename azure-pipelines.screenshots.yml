trigger: none # Manual only

parameters:
- name: matrix
  displayName: Pool Image and Python Version Matrix
  type: object
  default:
    # mac_py310:
    #   imageName: 'macOS-latest'
    #   python.version: '3.10'
    # linux_py310:
    #   imageName: 'ubuntu-latest'
    #   python.version: '3.10'
    # windows_py310:
    #   imageName: 'windows-latest'
    #   python.version: '3.10'
    # mac_py311:
    #   imageName: 'macOS-latest'
    #   python.version: '3.11'
    linux_py311:
      imageName: 'ubuntu-latest'
      python.version: '3.11'
    windows_py311:
      imageName: 'windows-latest'
      python.version: '3.11'
    # mac_py312:
    #   imageName: 'macOS-latest'
    #   python.version: '3.12'
    # linux_py312:
    #   imageName: 'ubuntu-latest'
    #   python.version: '3.12'
    # windows_py312:
    #   imageName: 'windows-latest'
    #   python.version: '3.12'

variables:
  triggeredByPullRequest: $[eq(variables['Build.Reason'], 'PullRequest')]

stages:
  - stage: GenerateScreenshots
    displayName: Generate Test Screenshots
    jobs:
      - job: UpdateScreenshots
        strategy:
          matrix: ${{ parameters.matrix }}

        pool:
          vmImage: $(imageName)

        steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'

        - script: |
            python -m http.server 8000 -d $(Build.SourcesDirectory)/datamapplot/tests/html &
          displayName: 'Start HTTP server (Unix)'
          condition: ne(variables['Agent.OS'], 'Windows_NT')

        - powershell: |
            $serverJob = Start-Process python -ArgumentList "-m", "http.server", "8000", "-d", "$env:BUILD_SOURCESDIRECTORY\datamapplot\tests\html" -PassThru -NoNewWindow
            Start-Sleep -Seconds 5
            $retry = 0
            do {
                try {
                    $response = Invoke-WebRequest -Uri "http://localhost:8000" -Method Head
                    Write-Host "Server started successfully"
                    break
                } catch {
                    Write-Host "Waiting for server to start... Attempt $retry"
                    Start-Sleep -Seconds 2
                    $retry++
                }
            } while ($retry -lt 5)

            if ($retry -eq 5) {
                Write-Error "Server failed to start after multiple attempts"
                exit 1
            }
          displayName: 'Start HTTP server (Windows)'
          condition: eq(variables['Agent.OS'], 'Windows_NT')

        - task: NodeTool@0
          inputs:
            versionSpec: '22'
          displayName: 'Use Node.js for frontend tests'

        - script: |
            npm ci
          displayName: 'Install npm dependencies'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'

        - script: |
            npx playwright install --with-deps
          displayName: 'Install Playwright browsers'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'

        - script: |
            npx playwright test --update-snapshots
          displayName: 'Run Playwright tests'
          workingDirectory: '$(Build.SourcesDirectory)/datamapplot/interactive_tests'
          env:
            CI: 'true'

        - task: CopyFiles@2
          condition: eq(variables['Agent.OS'], 'Windows_NT')
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/datamapplot/interactive_tests/tests'
            Contents: '*-win32.png'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/filtered-screenshots-windows'
          displayName: 'Copy filtered screenshots (Windows)'

        - task: CopyFiles@2
          condition: eq(variables['Agent.OS'], 'Darwin')
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/datamapplot/interactive_tests/tests'
            Contents: '*-darwin.png'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/filtered-screenshots-darwin'
          displayName: 'Copy filtered screenshots (Darwin)'

        - task: CopyFiles@2
          condition: eq(variables['Agent.OS'], 'Linux')
          inputs:
            SourceFolder: '$(Build.SourcesDirectory)/datamapplot/interactive_tests/tests'
            Contents: '*-linux.png'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/filtered-screenshots-linux'
          displayName: 'Copy filtered screenshots (Linux)'

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)/filtered-screenshots'
            artifact: 'updated-screenshots-$(Agent.OS)'
          displayName: 'Publish updated screenshots'
          condition: always()

        - task: PublishTestResults@2
          displayName: 'Publish frontest test results'
          inputs:
            searchFolder: 'test-results'
            testResultsFormat: 'JUnit'
            testResultsFiles: 'e2e-junit-results.xml'
            mergeTestResults: true
            failTaskOnFailedTests: true
            testRunTitle: 'Playwright Test Results'
          condition: succeededOrFailed()
